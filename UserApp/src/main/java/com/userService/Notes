

@SpringBootApplication = @EnableAutoConfiguration + @SpringBootConfiguration + @ComponentScan


@EnableAutoConfiguration :-

designed to minimize the boilerplate configuration needed to get a Spring application up and running.
it scans the classpath for various configurations and automatically applies them based on the dependencies and properties present. 
It can configure data sources, JPA, web servers, etc., without explicit configuration.

Exclude Auto-configuration Classes
@EnableAutoConfiguration(exclude = DataSourceAutoConfiguration.class)

Overriding Auto-configuration
For instance, if you define your DataSource bean, it will override the auto-configured one.
@Configuration
public class MyConfiguration {

    @Bean
    public DataSource dataSource() {
        // return your custom datasource
    }
}


 @Configuration :-
 
 annotation which indicates that the class has @Bean definition methods. 
 So Spring container can process the class and generate Spring Beans to be used in the application.
 
 
 
 @SpringBootConfiguration: 
 
 This annotation is used to indicate that the class is a Spring Boot configuration class.
  It is similar to @Configuration but specific to Spring Boot applications.
  
  
  
 @ComponentScan :-
 
 used in the Spring Framework for auto-detecting and registering Spring-managed components (e.g. beans, controllers, services, repositories, etc.) 
 within a specified package or set of packages. 
 Spring will scan the specified package(s) for classes annotated with @Component (or any of its specialisations, such as @Controller, @Service, or @Repository) and 
 automatically create instances of these classes as beans in the Spring container. These beans can then be injected into other beans or components 
 using dependency injection. 
 @ComponentScan("com.example.myapp") This will instruct Spring to scan the com.example.myapp package (and its sub-packages) for all classes annotated with 
 @Component or its specialisations, and register them as beans in the Spring container.
 you can customize the behavior of @ComponentScan by using other attributes, such as basePackages, basePackageClasses, excludeFilters, and includeFilters
 If you have not specified @ComponentScan in a Spring Boot project, Spring Boot will use its default component scanning behavior to detect and register Spring-managed components in your application.
 By default, Spring Boot will perform component scanning starting from the package of your main class (the class annotated with @SpringBootApplication). Spring Boot will automatically detect and register
 any components annotated with @Component or its specializations (@Controller, @Service, @Repository, etc.) in this package and its sub-packages. 
  
  
  
 @EnableFeignClients :-
 
 is an annotation in Spring Cloud that enables Feign declarative REST client support. Feign is a lightweight framework 
 that simplifies the creation of REST clients. It allows you to write HTTP clients declaratively using annotations, making it easier to integrate 
 with other microservices or HTTP APIs. 
 Enabling Feign Clients: 
 Typically used on a configuration class (usually the main application class annotated with @SpringBootApplication).
 It scans for interfaces annotated with @FeignClient within specified base packages. 
 This annotation is used to enable Feign clients in a Spring Boot application. Feign clients are interfaces annotated
 with @FeignClient that specify the microservice or HTTP API to communicate with. 
 It sets up necessary beans and configurations to enable Feign clients to make HTTP requests to the specified services.
  
  
  