
server.port=9090
spring.application.name=User-APP

spring.profiles.active=prod

spring.datasource.url=jdbc:mysql://localhost:3306/microservices
spring.datasource.username=root
spring.datasource.password=Root@123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update


######## for actuator #######
management.endpoints.web.exposure.include=health,info
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always


##### For resilience ####
resilience4j.circuitbreaker.instances.ratingHotelBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.ratingHotelBreaker.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.ratingHotelBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.ratingHotelBreaker.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.ratingHotelBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.ratingHotelBreaker.wait-duration-in-open-state=6s
resilience4j.circuitbreaker.instances.ratingHotelBreaker.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.ratingHotelBreaker.sliding-window-size=10
resilience4j.circuitbreaker.instances.ratingHotelBreaker.sliding-window-type=count-based

####### For retry ########
resilience4j.retry.instances.ratingHotelRetry.max-attempts=3
resilience4j.retry.instances.ratingHotelRetry.wait-duration=5s


###### For Rate limiter  ########
resilience4j.ratelimiter.instances.userRateLimiter.limit-refresh-period=4s
resilience4j.ratelimiter.instances.userRateLimiter.limit-for-period=2
resilience4j.ratelimiter.instances.userRateLimiter.timeout-duration=1s


##### To reach config server ######
spring.config.import=optional:configserver:http://localhost:9094



#logging.level.com.yourpackage=debug







#when the circuit breaker is in the OPEN state, it does not permit any calls to pass through to the service. 
#Instead, it immediately returns a failure response or triggers a fallback mechanism.


#eureka.client.fetch-registry=true
#eureka.client.register-with-eureka=true
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#eureka.instance.prefer-ip-address=true



#eureka.client.service-url.defaultZone: This property is set to http://localhost:8761/eureka by default. 
#It specifies the URL of the Eureka server that the client should register with.
#If your Eureka server is running on a different URL or port, you would explicitly set eureka.client.service-url.defaultZone in your application.properties 
#or application.yml to point to the correct server URL.

#eureka.instance.prefer-ip-address=true
#specify that the IP address of the instance should be used when registering with the Eureka Server instead of the hostname. 
#This helps in scenarios where IP addresses are more stable or reliable compared to hostnames.

#The eureka.client.service-url.defaultZone property specifies the location of the Eureka server where the service should register itself and 
##discover other services. It's typically set to the URL of the Eureka server instance.

#optional: This keyword indicates that the configuration import is optional. If the specified configuration source is not available or fails to 
#load, the application will still start with its default configuration. This is useful for scenarios where the external configuration source 
#might not always be accessible or necessary.
#configserver: This keyword specifies the type of configuration source. In this case, it indicates that the configuration is being imported 
#from a Spring Cloud Config Server.